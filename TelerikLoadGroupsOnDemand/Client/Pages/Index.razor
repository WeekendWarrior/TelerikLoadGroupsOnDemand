@page "/"
@inject PartsService PartsService

<PageTitle>@PageTile</PageTitle>

<h1>@PageTile</h1>

<TelerikLoaderContainer OverlayThemeColor="light" Visible="@IsLoading">
    <Template>
        <TelerikLoader Size="@ThemeConstants.Loader.Size.Large" />
    </Template>
</TelerikLoaderContainer>

<TelerikGrid @ref="@Grid"
             TItem="@Part"
             FilterMode="@GridFilterMode.FilterMenu"
             ShowColumnMenu="@true"
             Sortable="@true"
             Resizable="@true"
             Reorderable="@true"
             Pageable="@true"
             LoadGroupsOnDemand="@true"
             PageSize="20"
             OnStateInit="@GridOnStateInit"
             OnRead="@OnReadItemsAsync">
    <GridSettings>
        <GridColumnMenuSettings Lockable="@false" 
                                ShowColumnChooser="@false" />
    </GridSettings>
    <GridToolBar>
        <div class="block grow-1">
            <label for="groupBy" class="mt-2">Group By:</label>
            <TelerikDropDownList Id="groupBy"
                                 @bind-Value="@SelectedGroupBy"
                                 Data="@_groupByTypes"
                                 Width="150px"
                                 Size="@ThemeConstants.DropDownList.Size.Small"
                                 OnChange="@SelectedGroupByOnChange">
                <DropDownListSettings>
                    <DropDownListPopupSettings Height="auto"/>
                </DropDownListSettings>
            </TelerikDropDownList>
        </div>
    </GridToolBar>
    <GridColumns>
        <GridColumn Field="@nameof(Part.Mpn)"
                    Title="MPN"
                    FieldType="@(typeof(string))"
                    Width="125px"/>
        <GridColumn Field="@nameof(Part.Cipn)"
                    FieldType="@(typeof(string))"
                    Title="CIPN"
                    Width="125px"/>
        <GridColumn Field="@nameof(Part.CustomerName)"
                    FieldType="@(typeof(string))"
                    Title="Customer Name"
                    Width="100px"/>
        <GridColumn Field="@nameof(Part.CustomerNumber)"
                    FieldType="@(typeof(int))"
                    Title="Customer #"
                    Width="100px"/>
    </GridColumns>
    <NoDataTemplate>
        <div>
            <TelerikIcon Icon="data"/> There is no data to display.
        </div>
    </NoDataTemplate>
</TelerikGrid>

@code
{
    private const string PageTile = "Telerik Load Groups on Demand Test";
    
    private bool IsLoading { get; set; }
    
    private TelerikGrid<Part> Grid { get; set; } = default!;

    private readonly List<PartGroupByType> _groupByTypes = new()
    {
        PartGroupByType.None,
        PartGroupByType.CustomerName,
        PartGroupByType.Cipn,
    };
    
    private PartGroupByType SelectedGroupBy { get; set; } = PartGroupByType.None;
    
    private async Task OnReadItemsAsync(GridReadEventArgs args)
    {
        IsLoading = true;

        var response = await PartsService.GetPartsAsync(args.Request);
        
        if (response.Success)
        {
            var data = response.Data ?? new List<Part>();

            args.Data = args.Request.Groups.Count > 0
                ? response.GroupedData
                : data;
            
            args.Total = response.TotalResults;
        }
        else
        {
            args.Data = new List<Part>();
            args.Total = 0;
        }
        
        IsLoading = false;
    }

    private static void GridOnStateInit(GridStateEventArgs<Part> args) =>
        args.GridState = new()
        {
            SortDescriptors = new List<SortDescriptor> { new() { Member = nameof(Part.CustomerName) } }
        };

    private void SelectedGroupByOnChange()
    {
        var state = Grid.GetState();

        if (SelectedGroupBy == PartGroupByType.None)
        {
            state.GroupDescriptors = new List<GroupDescriptor>();
            
            Grid.SetState(state);
                
            return;
        }

        Grid.SetState(new GridState<Part>
        {
            SortDescriptors = state.SortDescriptors,
            GroupDescriptors = new List<GroupDescriptor>
            {
                new()
                {
                    Member = SelectedGroupBy.ToMemberName(),
                    MemberType = SelectedGroupBy.ToMemberType(),
                    SortDirection = SelectedGroupBy.ToListSortDirection()
                }
            }
        });
    }

}
